[user]
    name = Ryo Fujimoto
#    email = fujimisakari@gmail.com
    email = rfujimoto@squeeze-inc.co.jp
[color]
    ui = auto
[core]
    excludesfile = ~/.gitignore
    pager = "LESS=-R less"
    autocrlf = input                 # CRLFを自動変換
    quotepath = false                # 日本語ファイル名を表示できるようにする
[alias]
    ci = commit
    cam = commit -a --amend          # 直前のcommitを修正
    co = checkout
    st = status
    cst = status .
    sh = show
    so = remote show origin
    ft = fetch
    pr = pull --rebase               # pull rebase
    rbm = rebase master              # masterへのrebaseはよく使うのでalias

    # branch関連
    br = branch
    ba = branch -a                   # originも含めた全てのbranchを表示
    bm = branch --merged             # merge済みのbranchを表示
    bn = branch --no-merged          # mergeしてないbranchを表示

    # log関連
    wc = whatchanged                 # logに変更されたファイルも一緒に出す
    ls = log --stat                  # logに変更されたファイルも一緒に出す
    lp = log -p                      # diffも一緒に出す
    la = log --pretty='format:%C(magenta)%cd%Creset %C(yellow)%h%Creset %Cgreen(%an)%Creset %s %Cred%d%Creset' --date=iso
    lac = "!f() { git rev-parse --abbrev-ref HEAD ; }; git log --date=iso --pretty='format:%C(magenta)%cd%Creset %C(yellow)%h%Creset %Cgreen(%an)%Creset %s %Cred%d%Creset' origin/master..`f`"
    lad = "!f() { git rev-parse --abbrev-ref HEAD ; }; git log --date=iso --pretty='format:%C(magenta)%cd%Creset %C(yellow)%h%Creset %Cgreen(%an)%Creset %s %Cred%d%Creset' origin/develop..`f`"
    laf = log --pretty='format:%C(magenta)%cd%Creset %C(yellow)%h%Creset %Cgreen(%an)%Creset %s %Cred%d%Creset' --author=fujimoto
    dfm = "!f() { git rev-parse --abbrev-ref HEAD ; }; git diff origin/master..`f`"
    dfd = "!f() { git rev-parse --abbrev-ref HEAD ; }; git diff origin/develop..`f`"
    lo = log origin                  # originのlog
    oneline = log --pretty=oneline
    ranking = shortlog -s -n --no-merges

    # logをtree表示
    tr = log --graph --date=short --pretty='format:%C(magenta)%cd%Creset %C(yellow)%h%Creset %Cgreen(%an)%Creset %s %Cred%d%Creset'
    log-graph = log --graph --date=short --pretty=format:'%Cgreen%h %cd %Cblue%cn %Creset%s'
    log-all = log --graph --all --color --pretty='%x09%h %cn%x09%s %Cred%d%Creset'

    # diff関連
    dm = diff master                 # masterとのdiff
    dw = diff --color-words          # 単語単位でいろつけてdiff
    dc = diff --cached               # addされているものとのdiff
    ds = diff --staged               # 同上(1.6.1移行)
    d1 = diff HEAD~                  # HEADから1つ前とdiff
    d2 = diff HEAD~~                 # HEADから2つ前とdiff
    d3 = diff HEAD~~~                # HEADから3つ前とdiff
    d4 = diff HEAD~~~~               # HEADから4つ前とdiff
    d5 = diff HEAD~~~~~              # HEADから5つ前とdiff
    d10 = diff HEAD~~~~~~~~~~        # HEADから10前とdiff

    # grep関連
    gr = grep
    gn = grep -n

    # mergeの際にconflictが起きたファイルを編集
    edit-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; vim `f`"
    # mergeの際にconflictが起きたファイルをadd
    add-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; git add `f`"
[commit]
	template = /Users/fujimo/.gitmessage.txt
